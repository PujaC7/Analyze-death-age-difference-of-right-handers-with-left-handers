# -*- coding: utf-8 -*-
"""MTE_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZBXy50ROfDJOYRW09p4-aGm3yTe85qju

## Task 1:
"""

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt

# Load the data
data_url = "https://gist.githubusercontent.com/mbonsma/8da0990b71ba9a09f7de395574e54df1/raw/aec88b30af87fad8d45da7e774223f91dad09e88/lh_data.csv"
lefthanded_data = pd.read_csv(data_url)

# Create a figure and axis objects
fig, ax = plt.subplots()

# Plot left-handedness rates vs. age for both males and females
ax.plot(lefthanded_data['Age'], lefthanded_data['Female'], marker='o', label='Female')
ax.plot(lefthanded_data['Age'], lefthanded_data['Male'], marker='x', label='Male')

# Add a legend
ax.legend()

# Set labels for the x and y-axis
ax.set_xlabel('Age')
ax.set_ylabel('Left-handedness Rate')

# Show the plot
plt.show()

"""## Task 2:"""

# Calculate the birth year for each age
lefthanded_data['Birth_year'] = 1986 - lefthanded_data['Age']

# Calculate the average of male and female left-handedness rates
lefthanded_data['Mean_lh'] = lefthanded_data[['Male', 'Female']].mean(axis=1)

# Create a plot of mean left-handedness ('Mean_lh') vs. birth year ('Birth_year')
fig, ax = plt.subplots()
ax.plot(lefthanded_data['Birth_year'], lefthanded_data['Mean_lh'], marker='o', linestyle='-', color='b')

# Set labels for the x and y-axis
ax.set_xlabel('Birth Year')
ax.set_ylabel('Mean Left-Handedness Rate')

# Show the plot
plt.show()

"""## Task 3:"""

import numpy as np

# Create a function for P(LH | A)
def calculate_probability_lh_given_age(ages_of_death, study_year=1990):
    """
    Calculate the probability of being left-handed given ages of death.

    Inputs:
    ages_of_death: numpy array of ages at death
    study_year: year of the study

    Returns:
    probability of left-handedness given the ages of death
    """

    # Extract the mean left-handedness rates for the early and late 1900s
    early_1900s_rate = lefthanded_data['Mean_lh'][-10:].mean()
    late_1900s_rate = lefthanded_data['Mean_lh'][:10].mean()

    # Extract left-handedness rates for individuals matching the ages of death
    middle_rates = lefthanded_data.loc[lefthanded_data['Birth_year'].isin(study_year - ages_of_death)]['Mean_lh']

    # Define the youngest and oldest ages based on the study year
    youngest_age = study_year - 1986 + 10  # The youngest age is 10
    oldest_age = study_year - 1986 + 86  # The oldest age is 86

    # Create an array to store the calculated probabilities
    P_return = np.zeros(ages_of_death.shape)

    # Calculate probabilities based on age ranges
    P_return[ages_of_death > oldest_age] = early_1900s_rate / 100
    P_return[ages_of_death < youngest_age] = late_1900s_rate / 100
    P_return[np.logical_and((ages_of_death <= oldest_age), (ages_of_death >= youngest_age))] = middle_rates / 100

    return P_return

"""## Task 4:"""

# Death distribution data for the United States in 1999
data_url_2 = "https://gist.githubusercontent.com/mbonsma/2f4076aab6820ca1807f4e29f75f18ec/raw/62f3ec07514c7e31f5979beeca86f19991540796/cdc_vs00199_table310.tsv"

# Load death distribution data
death_distribution_data = pd.read_csv(data_url_2, sep='\t', skiprows=[1])

# Drop NaN values from the 'Both Sexes' column
death_distribution_data = death_distribution_data.dropna(subset=['Both Sexes'])

# Create a plot of the number of people who died as a function of age
fig, ax = plt.subplots()
ax.plot(death_distribution_data['Age'], death_distribution_data['Both Sexes'], marker='o', linestyle='-')

# Set labels for the x and y-axis
ax.set_xlabel('Age')
ax.set_ylabel('Number of Deaths (Both Sexes)')

# Show the plot
plt.show()

"""## Task 5:"""

def calculate_overall_probability_lh(death_distribution_data, study_year=1990):
    """
    Calculate the overall probability of being left-handed for individuals who passed away in the study year.

    Inputs:
    death_distribution_data: dataframe containing death distribution data
    study_year: year of the study

    Returns:
    P(LH), a single floating-point number representing the overall probability of left-handedness
    """

    # Calculate the probability of being left-handed for each age group
    p_lh_age_group = calculate_probability_lh_given_age(death_distribution_data['Age'], study_year)

    # Multiply the number of deceased people by P(LH | A)
    p_list = death_distribution_data['Both Sexes'] * p_lh_age_group

    # Calculate the sum of p_list
    p_sum = np.sum(p_list)

    # Normalize to the total number of people (sum of death_distribution_data['Both Sexes'])
    p_lh = p_sum / np.sum(death_distribution_data['Both Sexes'])

    return p_lh

# Call the function with the provided death distribution data
overall_probability_lh = calculate_overall_probability_lh(death_distribution_data)
print("Overall Probability of Left-handedness:", overall_probability_lh)

"""## Task 6:"""

def calculate_probability_age_given_lh(ages_of_death, death_distribution_data, study_year=1990):
    """
    Calculate the overall probability of being a particular `ages_of_death` given that an individual is left-handed.

    Inputs:
    ages_of_death: numpy array of ages at death
    death_distribution_data: dataframe containing death distribution data
    study_year: year of the study

    Returns:
    P(A | LH), a numpy array representing the probability of being a certain age at death for left-handed individuals
    """

    # Calculate the overall probability of being a certain age (P_A) for all ages in the provided array
    P_A = death_distribution_data['Both Sexes'][ages_of_death] / np.sum(death_distribution_data['Both Sexes'])

    # Calculate the overall probability of being left-handed (P_left)
    P_left = calculate_overall_probability_lh(death_distribution_data, study_year)

    # Calculate the probability of being left-handed for a certain age (P_lh_A)
    P_lh_A = calculate_probability_lh_given_age(ages_of_death, study_year)

    # Calculate P(A | LH) using Bayes' rule
    P_A_given_lh = P_lh_A * P_A / P_left

    return P_A_given_lh

"""## Task 7:"""

def calculate_probability_age_given_rh(ages_of_death, death_distribution_data, study_year=1990):
    """
    Calculate the overall probability of being a particular `ages_of_death` given that an individual is right-handed.

    Inputs:
    ages_of_death: numpy array of ages at death
    death_distribution_data: dataframe containing death distribution data
    study_year: year of the study

    Returns:
    P(A | RH), a numpy array representing the probability of being a certain age at death for right-handed individuals
    """

    # Calculate the overall probability of being a certain age (P_A) for all ages in the provided array
    P_A = death_distribution_data['Both Sexes'][ages_of_death] / np.sum(death_distribution_data['Both Sexes'])

    # Calculate the overall probability of being right-handed (P_right)
    P_right = 1 - calculate_overall_probability_lh(death_distribution_data, study_year)  # Either LH or RH, so P_right = 1 - P_left

    # Calculate the probability of being right-handed for a certain age (P_rh_A)
    P_rh_A = 1 - calculate_probability_lh_given_age(ages_of_death, study_year)  # P_rh_A = 1 - P_lh_A

    # Calculate P(A | RH) using Bayes' rule
    P_A_given_rh = P_rh_A * P_A / P_right

    return P_A_given_rh

"""## Task 8:"""

# Define the age range from 6 to 120
ages = np.arange(6, 115, 1)

# Calculate the probability of being left- or right-handed for each age
left_handed_probability = calculate_probability_age_given_lh(ages, death_distribution_data)
right_handed_probability = calculate_probability_age_given_rh(ages, death_distribution_data)

# Create a plot of the two probabilities vs. age
fig, ax = plt.subplots()  # Create figure and axis objects
ax.plot(ages, left_handed_probability, label="Left-handed")
ax.plot(ages, right_handed_probability, label='Right-handed')
ax.legend()  # Add a legend
ax.set_xlabel("Age at death")
ax.set_ylabel(r"Probability of being age A at death")

# Show the plot
plt.show()

"""## Task 9:"""

# Calculate average ages for left-handed and right-handed groups
average_lh_age = np.nansum(ages * np.array(left_handed_probability))
average_rh_age = np.nansum(ages * np.array(right_handed_probability))

# Print the average ages for each group
print("Average age of left-handed: " + str(average_lh_age))
print("Average age of right-handed: " + str(average_rh_age))

# Print the difference between the average ages
print("The difference in average ages is " + str(round(average_rh_age - average_lh_age, 1)) + " years.")

"""## Task 10:"""

# Calculate the probability of being left- or right-handed for all ages in 2018
left_handed_probability_2018 = calculate_probability_age_given_lh(ages, death_distribution_data, study_year=2018)
right_handed_probability_2018 = calculate_probability_age_given_rh(ages, death_distribution_data, study_year=2018)

# Calculate average ages for left-handed and right-handed groups in 2018
average_lh_age_2018 = np.nansum(ages * np.array(left_handed_probability_2018))
average_rh_age_2018 = np.nansum(ages * np.array(right_handed_probability_2018))

# Print the difference in average ages for 2018
print("The difference in average ages in 2018 is " +
      str(round(average_rh_age_2018 - average_lh_age_2018, 1)) + " years.")